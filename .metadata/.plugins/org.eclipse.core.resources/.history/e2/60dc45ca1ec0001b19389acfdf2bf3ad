package br.com.cea.rotas.controller;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import br.com.cea.rotas.dto.UsuarioDTO;
import br.com.cea.rotas.services.UsuarioService;

@RestController
@RequestMapping(value = "/usuarios")
public class UsuarioController {
	
	@Autowired
	private UsuarioService service;
	
	@GetMapping
	public ResponseEntity<List<UsuarioDTO>> findAll() {
		List<UsuarioDTO> list = service.findAll();
		return ResponseEntity.ok().body(list);
	}
	
	@PostMapping
	public ResponseEntity<UsuarioDTO> insert (@RequestBody UsuarioDTO dto){
		dto = service.insert(dto);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
				.buildAndExpand(dto.getId()).toUri();
		return ResponseEntity.created(uri).body(dto);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<UsuarioDTO> findOne (@PathVariable Long id){
		UsuarioDTO dto = service.findOne(id);
		return ResponseEntity.ok().body(dto);
	}
	
	@PutMapping
	public ResponseEntity<UsuarioDTO> put (@RequestBody UsuarioDTO dto){
		dto = service.update(dto);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
				.buildAndExpand(dto.getId()).toUri();
		return ResponseEntity.created(uri).body(dto);
	}
	
	@DeleteMapping("/{id}")
	public void delete (@PathVariable Long id){
		service.delete(id);
	}

	@GetMapping(path = {"/findByName/{nome}"})
	public ResponseEntity<UsuarioDTO> findByName(@PathVariable String nome){
		UsuarioDTO dto = service.loadUserByName(nome);
		return ResponseEntity.ok().body(dto);
	}
	
	@GetMapping(path = {"/findByNameList/{nome}"})
	public ResponseEntity<List<UsuarioDTO>>findByNameList(@PathVariable String nome){
		List<UsuarioDTO> list = service.loadUserByNameList(nome);
		return ResponseEntity.ok().body(list);
	}

}
