package com.cea.estoqueLx.services;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cea.estoqueLx.model.User;
import com.cea.estoqueLx.repositories.UserRepository;



@Service
public class UserService {

	@Autowired
	private UserRepository userRepository;

	@Transactional(readOnly = true)
	public List<User> findAll() {
		List<User> list = userRepository.findAll();
		return list.stream().map(x -> new User(x)).collect(Collectors.toList());
	}

	@Transactional(readOnly = true)
	public User findOne(Long id) {
		Optional<User> user = userRepository.findById(id);
		return new User(user.get());
	}

	@Transactional
	public User insert(User dto) {
				
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		dto.setPassword(passwordEncoder.encode(dto.getPassword()));
		
		User user = new User(null, dto.getUsername(), dto.getEmail(), dto.getPassword());
	
		user = userRepository.save(user);
		return new User(user);
	}
	

	public User getByEmail(String email) {
		User user = userRepository.findOne(email);
		return user;
	}

}
